var searchIndex = {};
searchIndex["caesar"] = {"doc":"A drop-in replacement for the Rust standard library TCP listener with TLSv1.2 enabled.","items":[[3,"TlsTcpListener","caesar","Abstracts over a `TcpListener`, and layers TLSv1.2 on top.",null,null],[3,"TlsTcpStream","","Handles encrypted `TcpStream`s for you, and provides a\nsimple read/write interface.",null,null],[3,"Incoming","","A re-implementation of the `std::net::Incoming` iterator type.",null,null],[4,"CaesarError","","",null,null],[13,"Ssl","","",0,null],[13,"Io","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"from","","",0,{"inputs":[{"name":"sslerror"}],"output":{"name":"caesarerror"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"caesarerror"}}],[11,"fmt","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"bind","","Behaves exactly like `TcpStream::bind`. It expects paths to key and certificate files in\nPEM format.",1,{"inputs":[{"name":"a"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"bind_expert","","",1,{"inputs":[{"name":"a"},{"name":"str"},{"name":"str"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"accept","","",1,null],[11,"incoming","","",1,null],[11,"next","","",3,null],[11,"peer_addr","","",2,null],[11,"local_addr","","",2,null],[11,"shutdown","","",2,null],[11,"set_read_timeout","","",2,null],[11,"read","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,null],[6,"Result","","",null,null]],"paths":[[4,"CaesarError"],[3,"TlsTcpListener"],[3,"TlsTcpStream"],[3,"Incoming"]]};
initSearch(searchIndex);
